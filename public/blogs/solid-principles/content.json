{
  "head": {
    "title": "SOLID thing to remember before you code!",
    "og_title": "SOLID thing to remember before you code!",
    "description": "Standards to follow while you code.",
    "image": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blog_home/solid.jpg",
    "author_name": "Arun Vignesh",
    "date": "30-07-2020",
    "page_url": "https://arun-tech-blogs.herokuapp.com/blog/solid-principles",
    "page_id": "1596211695447",
    "readTime": "5 minutes"
  },
  "body": {
    "blog": {
      "heading": "SOLID thing to remember before you code!",
      "author": "Arun Vignesh A",
      "content": [
        {
          "module": "sub_heading",
          "value": "Why you need to follow a standard?"
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "Every programmer will have different perspectives on a problem. So everyone can bring their own way of solution. But that would be successful only when it has following qualities: <br/><ul><li>It is simple and clear to use.</li><li>It is easy to accommodate changes.</li><li>It can be divided to lower level units so that it will be more reusable</li></ul>"
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "Having this in mind, code in such a way that, it can be readable for everyone not only to the compilers. We can start with an example. Consider a function to get account balance from database."
        },
        {
          "module": "image",
          "value": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/image4.png"
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "So the above code satisfies your problem but it is not friendly to understand. This is like a <b>magic function</b>. It starts from creating Database connection, getting the user object with userId &nbsp;and from the user's accountId it fetches all account details from that it gives the account balance. So this function takes multiple responsibilities and it handles data that is irrelevant to it. Also if a change comes in, it's very difficult to accommodate it. To overcome this we have to follow some principles."
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "<ul><li><b>S</b>ingle Responsibility Principle</li><li><b>O</b>pen / Close Principle</li><li><b>L</b>iskov Substitution Principle</li><li><b>I</b>nterface Segregation Principle</li><li><b>D</b>ependency Inversion Principle</li></ul>"
        },
        {
          "module": "inner_sub_heading",
          "value": "Single Responsibility Principle:"
        },
        {
          "module": "image_and_text",
          "align_image": "left",
          "img_src": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/S.png",
          "value": "<p>This is one of the key principle to follow. So as the example we gave above, it lacks single responsibility since same function takes care of DB Connection, Querying the User and fetching account details from it and returning account balance.  As it is having irrelevant code we are dumping more responsibility to this code. <br/> <p>As per my view, If we have this Single Responsiblity Principle in mind most of the problems will not occur. Function having single responsibility will be a unit so this can be reused wherever it is necessary. So while reusing you will be eliminating the duplicate codes.  <b>DRY - Don't Repeat Yourself</b> - if we didn’t follow then it ends up with <b>WET - Write Everything Twice</b>. As we are breaking the code as a unit as possible, we will avoid too much nested loops or callbacks. By following this your code becomes simple and clear to read and easy to understand.</p></p>"
        },
        {
          "module": "quotation",
          "value": "The strongest principle that can eliminate most of the problems"
        },
        {
          "module": "inner_sub_heading",
          "value": "Open / Close Principle:"
        },
        {
          "module": "image_and_text",
          "align_image": "right",
          "img_src": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/o.png",
          "value": "<p>Expect the unexpected. Being in Agile you can get frequent changes for your solution so your code should open to extend and close for modification. In my view, using a config file is example of following this principle. So when you change your config your code reacts to that automatically but we can’t change the flow from the config. So the config file is open to change but it cannot change the code flow so it is closed to modify.<br/><p>So while following SRP you would write as units. Having this in mind, your each unit can accept the change. So a small change in a unit can bring a drastic change.</p> <p>Coming to OOPs, Interface plays a major role. Consider you are having different payment methods in your application and the client wants to bring a new payment method then it will be like adding a payment method as well as a change in payment handling techniques. So to overcome this:</p></p>"
        },
        {
          "module": "image",
          "value": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/image1.png"
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "Here the work will be only for adding a payment method but no change in payment handling part since that will use paymentMethod Interface. so now it is open to change and close to modify."
        },
        {
          "module": "inner_sub_heading",
          "value": "Liskov Substitution Principle:"
        },
        {
          "module": "image_and_text",
          "align_image": "left",
          "img_src": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/L.png",
          "value": "<p>This principle is very important while implementing method overriding because An overridden method of a subclass needs to accept the same input parameter values as the method of the superclass. That means you can implement less restrictive validation rules, but you are not allowed to enforce stricter ones in your subclass. Otherwise, any code that calls this method on an object of the superclass might cause an exception, if it gets called with an object of the subclass. Similarly the return value of a method in a subclass needs to comply with the same rules as the return value of the method in superclass.</p>"
        },
        {
          "module": "quotation",
          "value": "Unfortunately, there is no easy way to enforce this principle."
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "You need to implement your own checks to ensure that your code follows the Liskov Substitution Principle via test cases. In your test cases, you can execute a specific part of your application with objects of all subclasses to make sure that none of them causes an error or significantly changes its performance. "
        },
        {
          "module": "inner_sub_heading",
          "value": "Interface Segregation Principle:"
        },
        {
          "module": "image_and_text",
          "align_image": "right",
          "img_src": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/I.png",
          "value": "<p>This principle is very important while implementing method overriding because An overridden method of a subclass needs to accept the same input parameter values as the method of the superclass. That means you can implement less restrictive validation rules, but you are not allowed to enforce stricter ones in your subclass. Otherwise, any code that calls this method on an object of the superclass might cause an exception, if it gets called with an object of the subclass. Similarly the return value of a method in a subclass needs to comply with the same rules as the return value of the method in superclass.</p>"
        },
        {
          "module": "break"
        },
        {
          "module": "image",
          "value": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/image3.png"
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "In the above example you can see that scanQRCode function is irrelevant to Credit Card so unwanted implementation and throwing error while calling it. So here this scanQRCode can be moved to a new interface and so that can be implemented only where the method needed."
        },

        {
          "module": "inner_sub_heading",
          "value": "Dependency Inversion Principle:"
        },
        {
          "module": "image_and_text",
          "align_image": "left",
          "img_src": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/D.png",
          "value": "<p>DIP should be considered while integrating with any other class or module to provide a complex solution. In simple, High-level modules, which provide complex logic, should be easily reusable and unaffected by changes in low-level modules, which provide utility features. To achieve that, you need to introduce an abstraction that decouples the high-level and low-level modules from each other.<br/><p>Abstraction of interface between higher-level and lower-level software components are used to remove the dependencies between them. For example we are using 3 tier architecture, In this Business Layer and Data Layer is tightly coupled since if a request comes in then from the business layer we communicate with Database with a Datalayer instance. So this is tightly coupled and it will be in danger if there is a change in Data Layer. So using interfaces between them as abstraction makes it loosely coupled hence whichever Data Layer object implements the abstract interface can play with Business Layer.</p></p>"
        },
        {
          "module": "image",
          "value": "https://raw.githubusercontent.com/aarunvignesh/didactic-octo-waddle/master/public/blogs/solid-principles/image2.png"
        },
        {
          "module": "paragraph",
          "align": "justify",
          "value": "This is the high level glance of coding standards still lot more to cover…"
        },
        {
          "module": "break"
        },
        {
          "module": "paragraph",
          "align": "center",
          "value": "Happy Coding!!!"
        }
      ]
    }
  }
}
